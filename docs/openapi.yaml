openapi: 3.1.0
info:
  title: FinGuard AI API
  version: 0.1.0
servers:
  - url: /api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
      required: [error, message]
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        country: { type: string, minLength: 2, maxLength: 2 }
        currency: { type: string, minLength: 3, maxLength: 3 }
      required: [id, email]
    Account:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        institution: { type: string }
        type:
          type: string
          enum: [checking, savings, credit, cash]
      required: [id, name, type]
    Transaction:
      type: object
      properties:
        id: { type: string }
        account_id: { type: string }
        date: { type: string, format: date }
        amount: { type: number }
        merchant: { type: string }
        description: { type: string }
        category: { type: string }
      required: [id, account_id, date, amount]
    Budget:
      type: object
      properties:
        id: { type: string }
        period: { type: string, pattern: '^[0-9]{4}-[0-9]{2}$' }
        category: { type: string }
        amount: { type: number }
        threshold_pct: { type: integer, minimum: 1, maximum: 100 }
        spent: { type: number }
        percent: { type: number }
      required: [id, period, category, amount]
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                country: { type: string }
                currency: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        default:
          description: Error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string }
        default:
          $ref: '#/components/responses/Error'
  /auth/refresh:
    post:
      summary: Refresh access token
      responses:
        '200':
          description: OK
  /me:
    get:
      summary: Me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
  /accounts:
    get:
      summary: List accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Account' }
    post:
      summary: Create account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type]
              properties:
                name: { type: string }
                institution: { type: string }
                type: { type: string, enum: [checking, savings, credit, cash] }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Account' }
  /transactions:
    get:
      summary: List transactions
      parameters:
        - in: query; name: from; schema: { type: string, format: date }
        - in: query; name: to; schema: { type: string, format: date }
        - in: query; name: account_id; schema: { type: string }
        - in: query; name: category; schema: { type: string }
        - in: query; name: q; schema: { type: string }
        - in: query; name: page; schema: { type: integer, minimum: 1, default: 1 }
        - in: query; name: page_size; schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Transaction' }
                  total: { type: integer }
                  page: { type: integer }
                  page_size: { type: integer }
  /transactions/{id}:
    patch:
      summary: Update transaction category
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Transaction' }
  /transactions/upload-csv:
    post:
      summary: Upload CSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Accepted
  /transactions/upload-ofx:
    post:
      summary: Upload OFX/QFX
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Accepted
  /transactions/manual:
    post:
      summary: Create manual transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Created
  /imports:
    get:
      summary: Import history
      responses:
        '200':
          description: OK
  /trends:
    get:
      summary: Trends
      parameters:
        - in: query; name: from; schema: { type: string, format: date }
        - in: query; name: to; schema: { type: string, format: date }
        - in: query; name: group_by; schema: { type: string, enum: [category, month] }
      responses:
        '200':
          description: OK
  /budgets:
    get:
      summary: List budgets
      responses:
        '200':
          description: OK
    post:
      summary: Create budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '201':
          description: Created
  /budgets/{id}:
    patch:
      summary: Update budget
      parameters:
        - in: path; name: id; required: true; schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
                threshold_pct: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: OK
  /advise/budget:
    post:
      summary: AI budgeting tips
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [period]
              properties:
                period: { type: string }
                category: { type: string }
                context: { type: object }
      responses:
        '200':
          description: OK
  /score/overrun:
    post:
      summary: Overrun risk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [period]
              properties:
                period: { type: string }
                by: { type: string, enum: [category] }
      responses:
        '200':
          description: OK
  /insights:
    get:
      summary: Insights
      responses:
        '200':
          description: OK
  /links/sandbox/{provider}/connect:
    post:
      summary: Create sandbox link
      parameters:
        - in: path; name: provider; required: true; schema: { type: string, enum: [plaid, truelayer] }
      responses:
        '201':
          description: Created
  /webhooks/{provider}:
    post:
      summary: Provider webhook receiver (signature-verified)
      parameters:
        - in: path; name: provider; required: true; schema: { type: string, enum: [plaid, truelayer] }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200':
          description: OK
